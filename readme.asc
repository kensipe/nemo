NEMO Project
=====================
Example Application for search result combination, code named nemo as in finding nemo.  

Objective
=========
Problem definition: The lazy engineer Alex is tired of searching on multiple
engines to get the best result. Help Alex by making a program that given a
search term goes into X amount of search engines, do the search and then
return a list of the result. 

He wants to have two different ways to sort the results, and the ability to
add more ways later without much problems. 

Definition: (Given an engine count of 2) List of results ( [Response 0 for
engine 0], [Response 0 for engine 1], [Response 1 for engine 0]. [Response 1
for engine 1] ..... [Response n for engine 2] ) 

For the second algorithm he wants to introduce random weighting of the
results, for example: 60% priority for engine 1 and 40% priority for engine
2. (this could for example mean that engine 1 got the first two results in
the list). 

Any search engine can be used (minimum 2) (Google and Bing have good and
simple API's) Focus should be spent on: Modularity, Extensibility and
Readability.

Running from source
===================

First of all, clone the project:

    git clone <need repo location>


Building from Gradle
=====================
This project is built with Maven and Gradle.  Gradle is the preference, however maven is maintain as we will need to tie into the other GBMP projects.
At some point, this will all be built with gradle.  __Gradle is self-installing.__

    ./gradlew war
    or
    >gradlew.bat war

This will install gradle, download all dependencies and build a war file.

Running from Gradle
===================
If you just want to run the example application simply run the following:

	./gradlew jRW
	
then launch a browser to http://localhost:8080


Setting up the project in Intellij IDEA or Eclipse
---------------------------------------
To setup for IDEA:
    ./gradlew idea
To setup for Eclipse:
    ./gradlew eclipse
__This has been tested with IDEA__

It may be necessary to:
* Setup Artifact Building (WAR)
* Setup Run Configurations

